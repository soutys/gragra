## https://jamielinux.com/docs/openssl-certificate-authority/

dir               = .
RANDFILE          = ${ENV::HOME}/.rnd


[ ca ]
# `man ca`
default_ca = CA_default


[ CA_default ]
# Directory and file locations.
certs             = ${dir}/certs
crl_dir           = ${dir}/crl
new_certs_dir     = ${dir}/newcerts
database          = ${dir}/${ENV::CA_LEVEL}_index.txt
serial            = ${dir}/${ENV::CA_LEVEL}_serial

# The root key and root certificate.
private_key       = ${dir}/private/${ENV::KEY_SRC}.key.pem
certificate       = ${dir}/certs/ca_${ENV::CA_LEVEL_UP}.cert.pem

# For certificate revocation lists.
crlnumber         = ${dir}/${ENV::CA_LEVEL}_crlnumber
crl               = ${dir}/crl/ca_${ENV::CA_LEVEL_UP}.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

default_md        = sha512

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = ${ENV::CA_POLICY}
email_in_dn       = no
copy_extensions   = none
unique_subject    = no


[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional


[ policy_loose ]
# Allow the intermediate CA to sign a more diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional


[ req ]
# Options for the `req` tool (`man req`).
default_bits        = 4096
distinguished_name  = req_distinguished_name
string_mask         = utf8only

# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = sha512

# Extension to add when the -x509 option is used.
x509_extensions     = ${ENV::CA_EXT}

attributes          = req_attributes
prompt              = no


[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = "PL"
stateOrProvinceName             = "świętokrzyskie"
localityName                    = "Wąchock"
0.organizationName              = "Something Something Ltd."
organizationalUnitName          = "IT dep."
commonName                      = ${ENV::CA_CN}
emailAddress                    = "support@example.com"


[ req_attributes ]


[ v3_ca ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical, CA:true
keyUsage               = critical, digitalSignature, cRLSign, keyCertSign


[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical, CA:true, pathlen:0
keyUsage               = critical, digitalSignature, cRLSign, keyCertSign


[ server_cert ]
# Extensions for server certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth


[ client_cert ]
# Extensions for client certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection


# [ crl_ext ]
# # Extension for CRLs (`man x509v3_config`).
# authorityKeyIdentifier=keyid:always


# [ ocsp ]
# # Extension for OCSP signing certificates (`man ocsp`).
# basicConstraints = CA:FALSE
# subjectKeyIdentifier = hash
# authorityKeyIdentifier = keyid,issuer
# keyUsage = critical, digitalSignature
# extendedKeyUsage = critical, OCSPSigning

